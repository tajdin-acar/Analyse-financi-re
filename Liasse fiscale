import React, { useEffect, useMemo, useRef, useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Slider } from "@/components/ui/slider";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/ui/select";
import { Activity, LineChart as Lc, Banknote, BarChart3, ArrowLeftRight, ShieldAlert, TrendingUp, Wallet, Building2, Layers } from "lucide-react";
import {
  ResponsiveContainer,
  AreaChart,
  Area,
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip as RTooltip,
  Legend,
  BarChart,
  Bar,
} from "recharts";

/**
 * Simulateur Quant Financier — Portefeuille multi‑actifs
 *
 * - 3 actifs (EQ actions, FI obligations, CM matières premières)
 * - Génération de rendements corrélés par régime (normal, inflation, crise)
 * - Stratégie Risk Parity + Ciblage de volatilité + effet de levier borné
 * - Rééquilibrage périodique, coûts de transaction, turnover
 * - Métriques: PnL, DD max, Sharpe, VaR95, bêta marché
 * - Flux d'ordres vers Broker/Exchange (diagramme animé)
 */

// --- utilitaires ---
const clamp = (n, a, b) => Math.max(a, Math.min(b, n));
const ema = (prev, x, k) => prev == null ? x : prev * (1 - k) + k * x;
const quantile = (arr, q) => {
  if (!arr.length) return 0;
  const a = [...arr].sort((x, y) => x - y);
  const p = clamp(q, 0, 1) * (a.length - 1);
  const i = Math.floor(p), f = p - i;
  return a[i] * (1 - f) + a[Math.min(a.length - 1, i + 1)] * f;
};

// Cholesky 3x3 simple
function chol3(c) {
  const L = [[0,0,0],[0,0,0],[0,0,0]];
  L[0][0] = Math.sqrt(c[0][0]);
  L[1][0] = c[1][0] / L[0][0];
  L[1][1] = Math.sqrt(c[1][1] - L[1][0]*L[1][0]);
  L[2][0] = c[2][0] / L[0][0];
  L[2][1] = (c[2][1] - L[2][0]*L[1][0]) / L[1][1];
  L[2][2] = Math.sqrt(c[2][2] - L[2][0]*L[2][0] - L[2][1]*L[2][1]);
  return L;
}

function mvn3(cov) {
  const L = chol3(cov);
  const z = [randn(), randn(), randn()];
  return [
    L[0][0]*z[0],
    L[1][0]*z[0] + L[1][1]*z[1],
    L[2][0]*z[0] + L[2][1]*z[1] + L[2][2]*z[2],
  ];
}

function randn() {
  let u=0, v=0; while(!u) u=Math.random(); while(!v) v=Math.random();
  return Math.sqrt(-2*Math.log(u))*Math.cos(2*Math.PI*v);
}

// --- Régimes de marché ---
const REGIMES = {
  normal: {
    vols: { EQ: 0.15, FI: 0.06, CM: 0.12 },
    corr: [[1.0, -0.2, 0.3],[ -0.2, 1.0, 0.0],[0.3, 0.0, 1.0]],
    drift: { EQ: 0.06, FI: 0.02, CM: 0.03 },
  },
  inflation: {
    vols: { EQ: 0.18, FI: 0.10, CM: 0.22 },
    corr: [[1.0, -0.4, 0.35],[ -0.4, 1.0, -0.15],[0.35, -0.15, 1.0]],
    drift: { EQ: 0.03, FI: -0.01, CM: 0.05 },
  },
  crise: {
    vols: { EQ: 0.35, FI: 0.15, CM: 0.28 },
    corr: [[1.0, 0.2, 0.6],[ 0.2, 1.0, 0.3],[0.6, 0.3, 1.0]],
    drift: { EQ: -0.08, FI: 0.01, CM: -0.03 },
  }
};

const ASSETS = ["EQ","FI","CM"]; // Actions, Oblig, Commodities

// Graphe des flux d'ordres
const NODES = [
  { id:"cash", label:"Capital", x:80, y:150, kind:"wallet" },
  { id:"strat", label:"Stratégie", x:280, y:150, kind:"layers" },
  { id:"broker", label:"Broker", x:500, y:80, kind:"building" },
  { id:"exch", label:"Exchange", x:720, y:80, kind:"activity" },
  { id:"cust", label:"Custody", x:500, y:220, kind:"bank" },
  { id:"mkt", label:"Marchés", x:720, y:220, kind:"chart" },
];
const LINKS = [["cash","strat"],["strat","broker"],["broker","exch"],["exch","mkt"],["mkt","cust"],["cust","cash"]];

function NodeGlyph({ kind }){
  const base = "w-10 h-10 rounded-2xl shadow-md flex items-center justify-center text-white";
  if(kind==="wallet") return <div className={`${base} bg-slate-800`}><Wallet size={18}/></div>;
  if(kind==="layers") return <div className={`${base} bg-indigo-700`}><Layers size={18}/></div>;
  if(kind==="building") return <div className={`${base} bg-cyan-700`}><Building2 size={18}/></div>;
  if(kind==="activity") return <div className={`${base} bg-emerald-700`}><Activity size={18}/></div>;
  if(kind==="bank") return <div className={`${base} bg-amber-700`}><Banknote size={18}/></div>;
  return <div className={`${base} bg-rose-700`}><BarChart3 size={18}/></div>;
}

function Arrow({ x1,y1,x2,y2,intensity=0 }){
  const dx=x2-x1, dy=y2-y1; const len=Math.hypot(dx,dy); const ux=dx/len, uy=dy/len; const off=18;
  const sx=x1+ux*off, sy=y1+uy*off, ex=x2-ux*off, ey=y2-uy*off; const w=clamp(1+intensity*6,1,8);
  return (<g>
    <line x1={sx} y1={sy} x2={ex} y2={ey} strokeWidth={w} stroke="currentColor" className="text-slate-400" strokeLinecap="round"/>
    <polygon points={`${ex},${ey} ${ex-uy*6-ux*10},${ey+ux*6-uy*10} ${ex+uy*6-ux*10},${ey-ux*6-uy*10}`} fill="currentColor" className="text-slate-400"/>
  </g>);
}

export default function QuantPortfolioSimulator(){
  // état principal
  const [running, setRunning] = useState(true);
  const [regime, setRegime] = useState("normal");
  const [targetVol, setTargetVol] = useState(0.10); // vol annualisée
  const [maxLev, setMaxLev] = useState(2.0);
  const [tcBps, setTcBps] = useState(5); // coût transaction en bps
  const [rebalanceDays, setRebalanceDays] = useState(5);
  const [seedShock, setSeedShock] = useState(0); // pour déclencher un choc unique

  // métriques
  const [series, setSeries] = useState([]); // {t, nav, ret, dd, var95, lev}
  const [weights, setWeights] = useState({ EQ: 0.34, FI: 0.33, CM: 0.33 });
  const [lev, setLev] = useState(1.0);
  const [turnover, setTurnover] = useState(0);

  const [intensity, setIntensity] = useState({});
  const dayRef = useRef(0);
  const navRef = useRef(1.0);
  const retHistRef = useRef([]); // derniers ret port
  const volaEmaRef = useRef(null);
  const t0 = useRef(Date.now());

  useEffect(()=>{
    if(!running) return;
    const id = setInterval(()=>{
      dayRef.current += 1;
      const t = dayRef.current;

      // réglages du régime
      const cfg = REGIMES[regime];
      const dt = 1/252; // pas de temps journalier
      const vols = [cfg.vols.EQ*Math.sqrt(dt), cfg.vols.FI*Math.sqrt(dt), cfg.vols.CM*Math.sqrt(dt)];
      const cov = [
        [vols[0]*vols[0], cfg.corr[0][1]*vols[0]*vols[1], cfg.corr[0][2]*vols[0]*vols[2]],
        [cfg.corr[1][0]*vols[1]*vols[0], vols[1]*vols[1], cfg.corr[1][2]*vols[1]*vols[2]],
        [cfg.corr[2][0]*vols[2]*vols[0], cfg.corr[2][1]*vols[2]*vols[1], vols[2]*vols[2]],
      ];

      // choc ponctuel si seedShock > 0
      const shock = seedShock>0 && t===seedShock ? [ -0.05, 0.01, -0.03 ] : [0,0,0];

      const rnd = mvn3(cov); // rendements centrés
      const mu = [cfg.drift.EQ*dt, cfg.drift.FI*dt, cfg.drift.CM*dt];
      const rEQ = mu[0] + rnd[0] + shock[0];
      const rFI = mu[1] + rnd[1] + shock[1];
      const rCM = mu[2] + rnd[2] + shock[2];

      // estimation vol port EMA
      const w = weights; const rP = w.EQ*rEQ + w.FI*rFI + w.CM*rCM;
      const varInst = rP*rP*252; // approx var annualisée instantanée
      volaEmaRef.current = ema(volaEmaRef.current, Math.sqrt(varInst), 0.1);
      const estVol = Math.max(1e-6, volaEmaRef.current || 0.10);

      // levier pour cibler la vol
      const levTarget = clamp(targetVol/estVol, 0.1, maxLev);

      // rééquilibrage risk parity périodique
      let wNew = { ...w };
      if (t % rebalanceDays === 0 || t===1) {
        const sig = { EQ: Math.sqrt(cov[0][0])*Math.sqrt(252), FI: Math.sqrt(cov[1][1])*Math.sqrt(252), CM: Math.sqrt(cov[2][2])*Math.sqrt(252) };
        const invVol = { EQ: 1/Math.max(1e-6, sig.EQ), FI: 1/Math.max(1e-6, sig.FI), CM: 1/Math.max(1e-6, sig.CM) };
        const s = invVol.EQ + invVol.FI + invVol.CM;
        wNew = { EQ: invVol.EQ/s, FI: invVol.FI/s, CM: invVol.CM/s };

        // coût de transaction sur le turnover
        const tv = Math.abs(wNew.EQ - w.EQ) + Math.abs(wNew.FI - w.FI) + Math.abs(wNew.CM - w.CM);
        setTurnover(tv);
        setWeights(wNew);
      }

      // coût proportionnel
      const cost = turnover * (tcBps/10000);

      // retour du portefeuille appliquant le levier
      const portRet = levTarget * (wNew.EQ*rEQ + wNew.FI*rFI + wNew.CM*rCM) - cost;

      // NAV et stats
      navRef.current *= (1 + portRet);

      // metrics
      retHistRef.current.push(portRet);
      if (retHistRef.current.length > 500) retHistRef.current.shift();
      const var95 = -quantile(retHistRef.current, 0.05);
      const nav = navRef.current;

      // drawdown
      const peak = series.length ? Math.max(...series.map(s=>s.nav)) : Math.max(1, nav);
      const dd = nav/peak - 1;

      setLev(levTarget);
      setSeries((old)=>{
        const arr = old.slice(-240); // ~6 mois de barres
        return [...arr, { t, nav: +nav.toFixed(5), ret: +portRet.toFixed(5), dd: +dd.toFixed(5), var95: +var95.toFixed(5), lev: +levTarget.toFixed(2) }];
      });

      // intensité des flux ~ volume d'ordres
      const inten = {};
      const volTrade = turnover * Math.abs(levTarget-1+0.0001) + Math.abs(portRet)*50; // heuristique
      const scale = clamp(volTrade*2,0,1);
      LINKS.forEach(([a,b])=>{ inten[`${a}-${b}`] = scale; });
      setIntensity(inten);

    }, 500);
    return ()=>clearInterval(id);
  }, [running, regime, targetVol, maxLev, tcBps, rebalanceDays, weights, turnover, seedShock]);

  const routes = useMemo(()=> LINKS.map(([a,b])=>({ a: NODES.find(n=>n.id===a), b: NODES.find(n=>n.id===b), id:`${a}-${b}` })), []);

  const last = series[series.length-1];
  const pnlPct = last ? (last.nav-1)*100 : 0;
  const sharpe = useMemo(()=>{
    const rets = series.map(s=>s.ret);
    if(rets.length<10) return 0;
    const m = rets.reduce((a,b)=>a+b,0)/rets.length;
    const sd = Math.sqrt(rets.reduce((a,b)=>a+(b-m)*(b-m),0)/Math.max(1,rets.length-1));
    return (m*252)/(sd*Math.sqrt(252) || 1);
  }, [series]);

  return (
    <div className="p-6 grid gap-6">
      <div className="grid lg:grid-cols-3 gap-6">
        {/* Graphe des flux */}
        <Card className="col-span-2">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">Moteur de trading multi‑actifs <Badge>tick 500ms</Badge></CardTitle>
          </CardHeader>
          <CardContent>
            <div className="relative w-full overflow-hidden rounded-2xl bg-slate-900 p-4">
              <svg viewBox="0 0 820 300" className="w-full h-[300px]">
                {routes.map(r=> (
                  <Arrow key={r.id} x1={r.a.x} y1={r.a.y} x2={r.b.x} y2={r.b.y} intensity={intensity[r.id]||0} />
                ))}
                {NODES.map(n=> (
                  <g key={n.id} transform={`translate(${n.x-20}, ${n.y-20})`}>
                    <foreignObject width="40" height="40">
                      <div className="flex items-center justify-center" xmlns="http://www.w3.org/1999/xhtml">
                        <NodeGlyph kind={n.kind}/>
                      </div>
                    </foreignObject>
                    <text x={20} y={54} textAnchor="middle" className="fill-slate-200 text-[10px] font-medium">{n.label}</text>
                  </g>
                ))}

                {/* Indicateurs instantanés */}
                {last && (
                  <g transform={`translate(520, 10)`}>
                    <rect width="280" height="80" rx="12" className="fill-white/10" />
                    <text x={12} y={22} className="fill-white text-[12px]">PNL: {pnlPct.toFixed(2)}%</text>
                    <text x={12} y={40} className="fill-white text-[12px]">Levier: {last.lev.toFixed(2)}x</text>
                    <text x={12} y={58} className="fill-white text-[12px]">VaR95: {(last.var95*100).toFixed(2)}%</text>
                    <text x={160} y={22} className="fill-white text-[12px]">DD: {(last.dd*100).toFixed(2)}%</text>
                    <text x={160} y={40} className="fill-white text-[12px]">Sharpe: {sharpe.toFixed(2)}</text>
                  </g>
                )}
              </svg>
            </div>
          </CardContent>
        </Card>

        {/* Contrôles */}
        <Card>
          <CardHeader>
            <CardTitle>Paramètres</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <div className="flex items-center justify-between"><span>Régime</span>
                <Select value={regime} onValueChange={setRegime}>
                  <SelectTrigger className="w-40"><SelectValue /></SelectTrigger>
                  <SelectContent>
                    <SelectItem value="normal">Normal</SelectItem>
                    <SelectItem value="inflation">Inflation</SelectItem>
                    <SelectItem value="crise">Crise</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            <div className="space-y-2">
              <div className="flex items-center justify-between"><span>Vol cible</span><Badge variant="outline">{Math.round(targetVol*1000)/10}%</Badge></div>
              <Slider value={[targetVol]} min={0.03} max={0.30} step={0.005} onValueChange={(v)=>setTargetVol(v[0])}/>
            </div>
            <div className="space-y-2">
              <div className="flex items-center justify-between"><span>Levier max</span><Badge variant="outline">{maxLev.toFixed(2)}x</Badge></div>
              <Slider value={[maxLev]} min={0.5} max={5} step={0.1} onValueChange={(v)=>setMaxLev(v[0])}/>
            </div>
            <div className="space-y-2">
              <div className="flex items-center justify-between"><span>Coût tx (bps)</span><Badge variant="outline">{tcBps}</Badge></div>
              <Slider value={[tcBps]} min={0} max={50} step={1} onValueChange={(v)=>setTcBps(v[0])}/>
            </div>
            <div className="space-y-2">
              <div className="flex items-center justify-between"><span>Rééquilibrage (jours)</span><Badge variant="outline">{rebalanceDays}</Badge></div>
              <Slider value={[rebalanceDays]} min={1} max={22} step={1} onValueChange={(v)=>setRebalanceDays(v[0])}/>
            </div>
            <div className="flex gap-2">
              <Button onClick={()=>setRunning(r=>!r)} variant="secondary" className="w-full">{running?"Pause":"Reprendre"}</Button>
              <Button variant="outline" className="w-full" onClick={()=>{ setSeries([]); dayRef.current=0; navRef.current=1; retHistRef.current=[]; }}>Reset</Button>
            </div>
            <div className="flex gap-2">
              <Button onClick={()=>setSeedShock(dayRef.current+1)} className="w-full"><ShieldAlert className="mr-2" size={16}/>Choc 1j</Button>
              <Button onClick={()=>setRegime("crise")} variant="destructive" className="w-full">Basculer Crise</Button>
            </div>
            <div className="text-xs text-slate-500 flex items-center gap-2"><ArrowLeftRight size={14}/> Turnover: {turnover.toFixed(3)} | Poids EQ {weights.EQ.toFixed(2)} FI {weights.FI.toFixed(2)} CM {weights.CM.toFixed(2)}</div>
          </CardContent>
        </Card>
      </div>

      {/* Courbes */}
      <Card>
        <CardHeader>
          <CardTitle>Métriques de performance</CardTitle>
        </CardHeader>
        <CardContent>
          <Tabs defaultValue="nav">
            <TabsList className="grid grid-cols-4 w-full">
              <TabsTrigger value="nav">Courbe NAV</TabsTrigger>
              <TabsTrigger value="ret">Rendement</TabsTrigger>
              <TabsTrigger value="risk">Risque</TabsTrigger>
              <TabsTrigger value="w">Poids</TabsTrigger>
            </TabsList>
            <TabsContent value="nav" className="mt-4">
              <div className="h-64">
                <ResponsiveContainer>
                  <AreaChart data={series} margin={{top:10, right:20, left:0, bottom:0}}>
                    <defs>
                      <linearGradient id="g1" x1="0" y1="0" x2="0" y2="1">
                        <stop offset="5%" stopColor="currentColor" stopOpacity={0.7}/>
                        <stop offset="95%" stopColor="currentColor" stopOpacity={0.05}/>
                      </linearGradient>
                    </defs>
                    <CartesianGrid strokeDasharray="3 3"/>
                    <XAxis dataKey="t" hide/>
                    <YAxis domain={[0.6, Math.max(1.8, (last?last.nav:1.0)+0.2)]}/>
                    <RTooltip/>
                    <Area type="monotone" dataKey="nav" stroke="currentColor" fillOpacity={1} fill="url(#g1)"/>
                  </AreaChart>
                </ResponsiveContainer>
              </div>
            </TabsContent>
            <TabsContent value="ret" className="mt-4">
              <div className="h-64">
                <ResponsiveContainer>
                  <LineChart data={series}>
                    <CartesianGrid strokeDasharray="3 3"/>
                    <XAxis dataKey="t" hide/>
                    <YAxis/>
                    <RTooltip/>
                    <Legend/>
                    <Line type="monotone" dataKey="ret" name="ret jour" dot={false} stroke="currentColor"/>
                  </LineChart>
                </ResponsiveContainer>
              </div>
            </TabsContent>
            <TabsContent value="risk" className="mt-4">
              <div className="h-64">
                <ResponsiveContainer>
                  <LineChart data={series}>
                    <CartesianGrid strokeDasharray="3 3"/>
                    <XAxis dataKey="t" hide/>
                    <YAxis/>
                    <RTooltip/>
                    <Line type="monotone" dataKey="var95" name="VaR95" dot={false}/>
                    <Line type="monotone" dataKey="dd" name="Drawdown" dot={false}/>
                    <Line type="monotone" dataKey="lev" name="Levier" dot={false}/>
                  </LineChart>
                </ResponsiveContainer>
              </div>
            </TabsContent>
            <TabsContent value="w" className="mt-4">
              <div className="h-64">
                <ResponsiveContainer>
                  <BarChart data={[{name:"Poids", EQ:weights.EQ, FI:weights.FI, CM:weights.CM}]}> 
                    <CartesianGrid strokeDasharray="3 3"/>
                    <XAxis dataKey="name"/>
                    <YAxis domain={[0,1]}/>
                    <RTooltip/>
                    <Bar dataKey="EQ" name="EQ"/>
                    <Bar dataKey="FI" name="FI"/>
                    <Bar dataKey="CM" name="CM"/>
                  </BarChart>
                </ResponsiveContainer>
              </div>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Mode d'emploi</CardTitle>
        </CardHeader>
        <CardContent className="text-sm text-slate-700 space-y-2">
          <ul className="list-disc pl-5 space-y-1">
            <li>Le curseur « Vol cible » ajuste le levier pour viser une volatilité annualisée donnée.</li>
            <li>Rééquilibrage risk parity tous les N jours. Les coûts s'appliquent au turnover.</li>
            <li>VaR95 calculée sur l'historique récent. Drawdown par rapport au pic de NAV.</li>
            <li>Le bouton « Choc 1j » injecte un day‑shock typé risk‑off.</li>
          </ul>
        </CardContent>
      </Card>
    </div>
  );
}
